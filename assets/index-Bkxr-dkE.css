:root{font-family:system-ui,Avenir,Helvetica,Arial,sans-serif;line-height:1.5;font-weight:400;color-scheme:light dark;color:#ffffffde;background-color:#242424;font-synthesis:none;text-rendering:optimizeLegibility;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}a{font-weight:500;color:#646cff;text-decoration:inherit}a:hover{color:#535bf2}body{margin:0;display:flex;place-items:center;min-width:320px;min-height:100vh}h1{font-size:3.2em;line-height:1.1}button{border-radius:8px;border:1px solid transparent;padding:.6em 1.2em;font-size:1em;font-weight:500;font-family:inherit;background-color:#1a1a1a;cursor:pointer;transition:border-color .25s}button:hover{border-color:#646cff}button:focus,button:focus-visible{outline:4px auto -webkit-focus-ring-color}@media (prefers-color-scheme: light){:root{color:#213547;background-color:#fff}a:hover{color:#747bff}button{background-color:#f9f9f9}}// --- Projektstruktur & GitLab Pages Hinweis --- // Du kannst das Projekt mit folgender Struktur anlegen: // /src/main.jsx → Einstiegspunkt (React + Tailwind) // /public → statische Dateien (favicon,icons) // .gitlab-ci.yml → für Pages-Deployment (siehe unten) // // Beispiel für .gitlab-ci.yml: // // image: node:18 // // pages: // script: // - npm install // - npm run build // - mv dist public // artifacts: // paths: // - public // only: // - main import{useEffect,useState}from "react"; import{Card,CardContent}from "@/components/ui/card"; import{Input}from "@/components/ui/input"; import{Button}from "@/components/ui/button"; import{Select,SelectTrigger,SelectValue,SelectContent,SelectItem}from "@/components/ui/select"; // Firebase Setup (nutzt Firestore Realtime Sync) import{initializeApp}from "firebase/app"; import{getFirestore,doc,getDoc,setDoc,onSnapshot}from "firebase/firestore"; const firebaseConfig ={apiKey:"AIzaSyC45cCbZ0cV6uVj0lDAFvTlOnTsvQXw5Sk",authDomain: "pokemonvoto.firebaseapp.com",projectId: "pokemonvoto",storageBucket: "pokemonvoto.appspot.com",messagingSenderId: "444050797910",appId: "1:444050797910:web:4e88354668608e6951d2f7"}; const app = initializeApp(firebaseConfig); const db = getFirestore(app); const soulSilverRoutes = ["New Bark Town","Route 29","Route 46","Cherrygrove City","Route 30","Route 31","Dark Cave","Violet City","Sprout Tower","Route 32","Ruins of Alph","Union Cave"]; const statusOptions = ["Captured","Missed","Fainted","Received"]; const natureOptions = ["Hardy","Lonely","Brave","Adamant","Naughty","Bold","Docile","Relaxed","Impish","Lax","Timid","Hasty","Serious","Jolly","Naive","Modest","Mild","Quiet","Bashful","Rash","Calm","Gentle","Sassy","Careful","Quirky"]; const bossData = [{name: "Silver",location: "Cherrygrove City"},{name: "Elder Li",location: "Sprout Tower"},{name: "Falkner",location: "Violet City Gym",levelCap: 13}]; export default function NuzlockeKoopTracker(){const [encounters,setEncounters] = useState({});const [defeatedBosses,setDefeatedBosses] = useState([]);const sessionId = "soulsilver_duo";useEffect(() => {const ref = doc(db,"sessions",sessionId); const unsub = onSnapshot(ref,(docSnap) => {if (docSnap.exists()) {const data = docSnap.data(); setEncounters(data.encounters || {}); setDefeatedBosses(data.defeatedBosses || []);}}); return () => unsub();},[]);const saveToFirestore = async (updatedEncounters,updatedBosses) =>{const ref = doc(db,"sessions",sessionId);await setDoc(ref,{encounters: updatedEncounters,defeatedBosses: updatedBosses})}const updateEncounter = (route,player,field,value) =>{const updated ={...encounters,[route]:{...encounters[route],[player]:{...encounters[route]?.[player],[field]: value,}}}setEncounters(updated);saveToFirestore(updated,defeatedBosses)}const toggleBossDefeated = (bossName) =>{const updated = defeatedBosses.includes(bossName) ? defeatedBosses.filter(b => b !== bossName) : [...defeatedBosses,bossName];setDefeatedBosses(updated);saveToFirestore(encounters,updated)}return (<div className="p-4 space-y-6 max-w-5xl mx-auto"> <h1 className="text-3xl font-bold text-center">Pokémon SoulSilver Duo Tracker</h1> <Card> <CardContent className="p-4 space-y-4"> <h2 className="text-xl font-semibold">🗺️ Encounters</h2> {soulSilverRoutes.map(route => (<div key={route} className="border-t pt-4 mt-4"> <h3 className="font-bold">{route}</h3> <div className="grid grid-cols-2 gap-4"> {["Player 1","Player 2"].map(player => (<div key={player} className="space-y-2"> <Input placeholder="Pokémon Name" value={encounters[route]?.[player]?.pokemon || ""} onChange={(e) => updateEncounter(route,player,"pokemon",e.target.value)} /> <Input placeholder="Nickname" value={encounters[route]?.[player]?.nickname || ""} onChange={(e) => updateEncounter(route,player,"nickname",e.target.value)} /> <Select onValueChange={(val) => updateEncounter(route,player,"status",val)} value={encounters[route]?.[player]?.status || ""} > <SelectTrigger> <SelectValue placeholder="Status" /> </SelectTrigger> <SelectContent> {statusOptions.map(status => (<SelectItem key={status} value={status}>{status}</SelectItem>))} </SelectContent> </Select> <Select onValueChange={(val) => updateEncounter(route,player,"nature",val)} value={encounters[route]?.[player]?.nature || ""} > <SelectTrigger> <SelectValue placeholder="Nature" /> </SelectTrigger> <SelectContent> {natureOptions.map(nature => (<SelectItem key={nature} value={nature}>{nature}</SelectItem>))} </SelectContent > <SelectTrigger> <SelectValue placeholder="Status" /> </SelectTrigger> <SelectContent> {statusOptions.map(status => (<SelectItem key={status} value={status}>{status}</SelectItem>))} </SelectContent> </Select> </div>))} </div> </div>))} </CardContent> </Card> <Card> <CardContent className="p-4 space-y-4"> <h2 className="text-xl font-semibold">👊 Boss Progress</h2> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> {bossData.map(boss => (<div key={boss.name} className="border rounded-xl p-4"> <div className="flex items-center justify-between"> <div> <p className="text-lg font-bold">{boss.name}</p> <p className="text-sm text-gray-500">{boss.location}</p> {boss.levelCap && <p className="text-xs">Level Cap: {boss.levelCap}</p>} </div> <Button variant={defeatedBosses.includes(boss.name) ? "default" : "outline"} onClick={() => toggleBossDefeated(boss.name)} > {defeatedBosses.includes(boss.name) ? "Defeated" : "Mark as Defeated"} </Button> </div> </div>))} </div> </CardContent> </Card> </div>)}
